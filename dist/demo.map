{"version":3,"sources":["../spriteAnimation.js","demo.js"],"names":["element","frames","duration","columns","rows","startingPosition","iterations","Infinity","animateSprite","el","document","querySelector","src","dataset","animationSrc","lastTime","positionX","positionY","style","background","backgroundSize","requestAnimationFrame","animation","now","backgroundPosition","window","onload","animationOne","SpriteAnimation","animationTwo"],"mappings":"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","file":"demo.map","sourceRoot":"..","sourcesContent":["export class SpriteAnimation {\r\n  constructor({\r\n    element,\r\n    frames,\r\n    duration = 600,\r\n    columns,\r\n    rows,\r\n    startingPosition = null,\r\n    iterations = Infinity\r\n  }) {\r\n    this.element = element;\r\n    this.frames = frames;\r\n    this.duration = duration / frames;\r\n    this.columns = columns;\r\n    this.rows = rows;\r\n    this.startingPosition = startingPosition;\r\n    this.iterations = iterations;\r\n    this.animateSprite = function() {\r\n      // Get all this' properties through object destructuring\r\n      // This allows for their use in the nested function animation()\r\n      let {\r\n        element,\r\n        startingPosition,\r\n        columns,\r\n        rows,\r\n        duration,\r\n        iterations\r\n      } = this;\r\n      // Elements are passed according to querySelector syntax.\r\n      const el = document.querySelector(`.${element}`);\r\n      const src = el.dataset.animationSrc;\r\n      let lastTime = 0; // Variable used to compare time inside animation function\r\n      let positionX = 0; // Start posX for the image slicer\r\n      let positionY = 0; // Start posY for the image slicer\r\n      if (startingPosition === \"bottom-right\") {\r\n        positionX = 100;\r\n        positionY = 100;\r\n      }\r\n      el.style.background = `url(${src}) ${positionX}% ${positionY}%`;\r\n      el.style.backgroundSize = `${columns * 100}% ${rows * 100}%`; // Scale up size by 100% to focus on one frame\r\n      requestAnimationFrame(animation);\r\n\r\n      function animation(now) {\r\n        // The now parameter passed to animation gives us the current time\r\n        if (now - lastTime < duration) {\r\n          // This if statement ensures that animation() in relation to the total duration. Otherwise it would fire at 60fps\r\n          requestAnimationFrame(animation);\r\n          return;\r\n        }\r\n        lastTime = now; // Update the last time, so we can compare now with it in next iteration\r\n        el.style.backgroundPosition = `${positionX}% ${positionY}%`; // We use the ES6 template literal to insert the variable \"position\" on the el\r\n        // If no startingPosition has been set, run the default algorithm (from top left -> bottom right)\r\n        if (startingPosition === null) {\r\n          if (positionX < 100) {\r\n            /*  \r\n                        Percent increment to Use = 100% / (Discrete images in your sprite â€“ 1)\r\n                        So if you have 6 images in your sprite: 100% / (6-1) = 100% / (5) = 20% \r\n                        The same is used for the positionY (rows in sprite)\r\n                        */\r\n            positionX = positionX + 100 / (columns - 1);\r\n          } else {\r\n            // Reset positionX to 0\r\n            positionX = 0;\r\n            if (positionY >= 100) {\r\n              // If positionY is 100, reset it as well\r\n              positionY = 0;\r\n              if (iterations && iterations > 0) {\r\n                /* \r\n                                The default animation will loop, but if an iteration parameter\r\n                                has been passed, we will run the animation the desired number\r\n                                of times specified by the parameter\r\n                                */\r\n                iterations--;\r\n              }\r\n            } else {\r\n              // Else increment positionY by 100%/(4-1)\r\n              positionY = positionY + 100 / (rows - 1);\r\n            }\r\n          }\r\n          if (iterations > 0) {\r\n            requestAnimationFrame(animation);\r\n          }\r\n        } else if (startingPosition === \"bottom-right\") {\r\n          // Same algorithm but opposite logic, going from 100 -> 0 on both axes instead of decreasing\r\n          if (positionX > 0) {\r\n            positionX = positionX - 100 / (columns - 1);\r\n          } else {\r\n            positionX = 100;\r\n            if (positionY > 0) {\r\n              positionY = positionY - 100 / (rows - 1);\r\n            } else {\r\n              positionY = 100;\r\n              if (iterations && iterations > 0) {\r\n                iterations--;\r\n              }\r\n            }\r\n          }\r\n          if (iterations > 0) {\r\n            requestAnimationFrame(animation);\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { SpriteAnimation } from \"./dist/spriteAnimation\";\r\n\r\nwindow.onload = function() {\r\n  let animationOne = new SpriteAnimation({\r\n    element: \"image\",\r\n    frames: 8,\r\n    duration: 600,\r\n    columns: 4,\r\n    rows: 2,\r\n    iterations: 10\r\n  });\r\n  let animationTwo = new SpriteAnimation({\r\n    element: \"image.image-two\",\r\n    frames: 24,\r\n    duration: 600,\r\n    columns: 8,\r\n    rows: 3,\r\n    iterations: 10\r\n  });\r\n  animationOne.animateSprite();\r\n  animationTwo.animateSprite();\r\n};\r\n"]}